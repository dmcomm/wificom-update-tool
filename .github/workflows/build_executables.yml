name: Build Executables

on:
  push:
  pull_request:
  release:
    types:
      - created

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2

      - name: Set up Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pyinstaller

      - name: Build macOS Launcher Script
        if: runner.os == 'macOS'
        run: |
          echo '#!/bin/bash' > wificom-update-installer.command
          echo 'SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"' >> wificom-update-installer.command
          echo 'cd "$SCRIPT_DIR"' >> wificom-update-installer.command
          echo 'python -m pip install --upgrade pip' >> wificom-update-installer.command
          echo 'pip install -r requirements.txt' >> wificom-update-installer.command
          echo 'python "run.py"' >> wificom-update-installer.command
          chmod +x wificom-update-installer.command
          mkdir macos-package
          cp wificom-update-installer.command macos-package/
          cp run.py macos-package/
          cp requirements.txt macos-package/
          zip -r macos-wificom-update-installer.zip macos-package/

      - name: Build Windows and Linux Executable
        if: runner.os != 'macOS'
        run: |
          pip install pyinstaller
          pyinstaller --icon=wificomlogo1.ico --hidden-import=queue --name wificom-update-installer run.py

      - name: Create Artifact Zip
        run: |
          mkdir package
          cp dist/wificom-update-installer package/
          cp run.py package/
          cp requirements.txt package/
          zip -r ${{ runner.os }}-wificom-update-installer.zip package/

      - name: Upload as Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: WiFiCom-Update-Installer-${{ runner.os }}
          path: |
            ${{
              runner.os == 'Windows' && 'windows' ||
              runner.os == 'Linux' && 'linux' ||
              runner.os == 'macOS' && 'macos' ||
              ''
            }}-wificom-update-installer.zip

      - name: Attach to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{
              runner.os == 'Windows' && 'windows' ||
              runner.os == 'Linux' && 'linux' ||
              runner.os == 'macOS' && 'macos' ||
              ''
            }}-wificom-update-installer.zip

  build-linux-glibc:
    runs-on: ubuntu-latest
    container:
      image: debian:buster

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2

      - name: Set up Python
        run: |
          apt-get update
          apt-get install -y python3 python3-pip
          python3 -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pyinstaller

      - name: Build Linux Executable with lower glibc
        run: |
          pyinstaller --onefile --hidden-import=queue --name wificom-update-installer-glibc228 run.py
          mv dist/wificom-update-installer-glibc228  linux-wificom-update-installer-glibc228

      - name: Upload as Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: WiFiCom-Update-Installer-Linux-glibc228
          path: linux-wificom-update-installer-glibc228

      - name: Attach to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: linux-wificom-update-installer-glibc228
